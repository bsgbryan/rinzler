// Generated by CoffeeScript 1.8.0
(function() {
  var calls, counters, listeners, microtime, profiles, threshold, waits;

  microtime = require('microtime');

  threshold = 30;

  listeners = [];

  calls = [];

  profiles = [];

  waits = {};

  counters = {};

  setInterval(function() {
    var call, completed, completes, counted, index, profile, progress, progressed, warning, warnings;
    warning = {};
    completed = {};
    progress = {};
    Object.keys(calls).forEach(function(id) {
      var waiting;
      waiting = ++waits[id];
      if (waiting > threshold) {
        return warning[id] = waiting;
      }
    });
    index = 0;
    if (calls.length > 0) {
      while (true) {
        call = calls[index];
        profile = profiles[index];
        if (profile.stop != null) {
          completed[call] = profile;
          calls.splice(index, 1);
          profiles.splice(index, 1);
        } else if (progress.progress != null) {
          progress[call] = profile.progress;
          profile.progress = [];
          ++index;
        } else {
          ++index;
        }
        if (index === calls.length) {
          break;
        }
      }
    }
    warnings = Object.keys(warning).length;
    counted = Object.keys(counters).length;
    completes = Object.keys(completed).length;
    progressed = Object.keys(progress).length;
    listeners.forEach(function(listener) {
      if (typeof listener.warn === 'function' && warnings > 0) {
        listener.warn(warning);
      }
      if (typeof listener.counts === 'function' && counted > 0) {
        listener.counts(counters);
      }
      if (typeof listener.complete === 'function' && completes > 0) {
        listener.complete(completed);
      }
      if (typeof listener.progress === 'function' && progressed > 0) {
        return listener.progress(progress);
      }
    });
    return counters = {};
  }, 1000);

  module.exports = {
    threshold: function(limit) {
      return threshold = limit;
    },
    listen: function(obj) {
      return listeners.push(obj);
    },
    add: function(item, data) {
      if (counters[item] == null) {
        counters[item] = {
          count: 0,
          data: []
        };
      }
      counters[item].count += 1;
      return counters[item].data.push({
        details: data,
        time: microtime.nowDouble()
      });
    },
    start: function(id) {
      calls.push(id);
      profiles.push({
        start: microtime.nowDouble()
      });
      return waits[id] = 0;
    },
    update: function(id) {
      var idx;
      idx = calls.indexOf(id);
      if (profiles[idx].progress == null) {
        profiles[idx].progress = [];
      }
      return profiles[idx].progress.push(microtime.nowDouble());
    },
    stop: function(id) {
      var idx;
      idx = calls.indexOf(id);
      profiles[idx].stop = microtime.nowDouble();
      return delete waits[id];
    }
  };

}).call(this);
